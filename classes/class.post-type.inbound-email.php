<?phpif ( !class_exists('Inbound_Mailer_Post_Type') ) {	class Inbound_Mailer_Post_Type {		function __construct() {			self::load_hooks();		}		private function load_hooks() {			add_action('admin_init', array( __CLASS__ ,	'rebuild_permalinks' ) );			add_action('init', array( __CLASS__ , 'register_post_type' ) , 1	);			add_action('init', array( __CLASS__ , 'register_tag_taxonomy' ) , 1 );			add_action('init', array( __CLASS__ , 'register_post_status' ) , 1 );						/* Load Admin Only Hooks */			if (is_admin()) {								/* Adds support for newly added post status */				add_action( 'admin_footer-post.php' , array( __CLASS__ , 'add_post_status' ) );				/* Register Columns */				add_filter( 'manage_inbound-email_posts_columns' , array( __CLASS__ , 'register_columns') );				/* Prepare Column Data */				add_action( "manage_posts_custom_column", array( __CLASS__ , 'prepare_column_data' ) , 10, 2 );				/* Define Sortable Columns */				add_filter( 'manage_edit_inbound-email_sortable_columns', array( __CLASS__ , 'define_sortable_columns' ) );				/* Filter Row Actions */				add_filter( 'post_row_actions' , array( __CLASS__ , 'filter_row_actions' ) , 10 , 2 );				/* Add Category Filter */				add_action( 'restrict_manage_posts' , array( __CLASS__ ,'add_category_taxonomy_filter' ));				/* Remove 'tags' & 'categories' from menu */				add_filter( 'admin_footer' , array( __CLASS__ , 'apply_js' ) );							}		}		/**		*	Rebuilds permalinks after activation 		*/		public static function rebuild_permalinks() {			$activation_check = get_option('inbound_email_activate_rewrite_check',0);			if ($activation_check) {				global $wp_rewrite;				$wp_rewrite->flush_rules();				update_option( 'inbound_email_activate_rewrite_check', '0');			}		}		/**		*	Registers inbound-email post type		*/		public static function register_post_type() {			if ( post_type_exists( 'inbound-email' ) ) {				return;			}						$email_path = apply_filters( 'inbound_email_preview_path' , 'mail' );						$labels = array(				'name' => __('Emails', 'inbound-email' ),				'singular_name' => __('Email Campaigns', 'inbound-email' ),				'add_new' => __('Add New', 'inbound-email' ),				'add_new_item' => __('Add New Campaign' , 'inbound-email' ),				'edit_item' => __(' ' , 'inbound-email' ),				'new_item' => __('New Campaign' , 'inbound-email' ),				'view_item' => __('View Email' , 'inbound-email' ),				'search_items' => __('Search Email Campaigns' , 'inbound-email' ),				'not_found' =>	__('Nothing found' , 'inbound-email' ),				'not_found_in_trash' => __('Nothing found in Trash' , 'inbound-email' ),				'parent_item_colon' => ''			);			$args = array(				'labels' => $labels,				'public' => true,				'publicly_queryable' => true,				'show_ui' => true,				'query_var' => true,				'menu_icon' => '',				'rewrite' => array("slug" => $email_path),				'capability_type' => 'post',				'hierarchical' => false,				'menu_position' => null,				'show_in_nav_menus'	=> false,				'supports' => array()			);			register_post_type( 'inbound-email' , $args );		}		/**		*	Register Tag Taxonomy 		*/		public static function register_tag_taxonomy() {			register_taxonomy('inbound_email_tag','inbound-email', array(					'hierarchical' => false,					'label' => __( 'Email Tags' , 'inbound-email' ),					'singular_label' => __( 'Tag' , 'inbound-email' ),					'show_ui' => true,					'show_in_nav_menus'	=> false,					'query_var' => true,					"rewrite" => true,					'add_new_item' => __('Tag email' , 'inbound-email')			));		}		/**		*  	Register Columns 		*/		public static function register_columns( $cols ) {			$cols = array(				"cb" => "<input type=\"checkbox\" />",				"title" => __( 'Title' , 'inbound-email' ),				"inbound_email_status" => __( 'status' , 'inbound-email' ),				"inbound_email_stats" => __( 'statistics' , 'inbound-email' )			);			return $cols;		}		/**		*  	Prepare Column Data		*/		public static function prepare_column_data( $column , $post_id ) {			global $post;			if ($post->post_type !='inbound-email') {				return $column;			}			switch ($column) {							case "ID":					echo $post->ID;					break;				case "inbound_email_status":					echo $post->post_status;					break;				case "inbound_preview":					$template = get_post_meta($post->ID, 'inbound-mailer-selected-template-0', true);					$permalink = get_permalink($post->ID);					$permalink = add_query_arg( array('w'=>'140') , $permalink );					$thumbnail = 'http://s.wordpress.com/mshots/v1/' . urlencode(esc_url($permalink)) . '?w=140';					if (file_exists( INBOUND_EMAIL_UPLOADS_PATH . $template . '/thumbnail.png')) {						//$thumbnail = INBOUND_EMAIL_UPLOADS_URLPATH .	$template . '/thumbnail.png';										} else {						//$thumbnail = INBOUND_EMAIL_URLPATH . 'templates/' . $template . '/thumbnail.png';					}									echo "<a title='Click to Preview this variation' class='thickbox' href='".$permalink."?inbvid=0&inbound_email_iframe_window=on&post_id=".$post->ID."&TB_iframe=true&width=640&height=703' target='_blank'><img src='".$thumbnail."' style='width:150px;height:110px;' title='Click to Preview'></a>";					break;					}		}		/**		*	Define Sortable Columns		*/		public static function define_sortable_columns($columns) {			return array(				'title' 			=> 'title',				'impressions'		=> 'impressions',				'actions'			=> 'actions',				'cr'				=> 'cr'			);		}				/**		*	Registers all post status types related to the inbound-email cpt		*	@adds post_status unsent		*	@adds post_status sent		*	@adds post_status sending		*	@adds post_status scheduled		*	@adds post_status automated		*/		public static function register_post_status() {						/* unsent */			register_post_status( 'unsent', array(				'label'	=> __( 'Unsent', 'inbound-email' ),				'public' => true,				'show_in_admin_all_list' => false,				'show_in_admin_status_list' => true,				'label_count' => _n_noop( 'Unsent <span class="count">(%s)</span>', 'Unsent <span class="count">(%s)</span>' )			));						/* sent */			register_post_status( 'sent', array(				'label'	=> __( 'Sent', 'inbound-email' ),				'public' => true,				'show_in_admin_all_list' => false,				'show_in_admin_status_list' => true,				'label_count' => _n_noop( 'Sent <span class="count">(%s)</span>', 'Sent <span class="count">(%s)</span>' )			));						/* sent */			register_post_status( 'cancelled', array(				'label'	=> __( 'Cancelled', 'inbound-email' ),				'public' => true,				'show_in_admin_all_list' => false,				'show_in_admin_status_list' => true,				'label_count' => _n_noop( 'Cancelled <span class="count">(%s)</span>', 'Cancelled <span class="count">(%s)</span>' )			));						/* automated */			register_post_status( 'sending', array(				'label'	=> __( 'Sending', 'inbound-email' ),				'public' => true,				'show_in_admin_all_list' => false,				'show_in_admin_status_list' => true,				'label_count' => _n_noop( 'Sending <span class="count">(%s)</span>', 'Sending <span class="count">(%s)</span>' )			));						/* scheduled */			register_post_status( 'scheduled', array(				'label'	=> __( 'Scheduled', 'inbound-email' ),				'public' => true,				'show_in_admin_all_list' => false,				'show_in_admin_status_list' => true,				'label_count' => _n_noop( 'Scheduled <span class="count">(%s)</span>', 'Scheduled <span class="count">(%s)</span>' )			));						/* automated */			register_post_status( 'automated', array(				'label'	=> __( 'Automated', 'inbound-email' ),				'public' => true,				'show_in_admin_all_list' => false,				'show_in_admin_status_list' => true,				'label_count' => _n_noop( 'Automated <span class="count">(%s)</span>', 'Automated <span class="count">(%s)</span>' )			));		}				/**		*	Adds dropdown support for added post status		*/		public static function add_post_status() {			global $post;						if($post->post_type == 'inbound-email'){								$statuses = array( 					'automated' => __( 'Automated' , 'inbound-email' ) ,					'unsent' => __( 'Unsent' , 'inbound-email' ) ,					'sent' => __( 'Sent' , 'inbound-email' ) ,					'cancelled' => __( 'Cancelled' , 'inbound-email' ) ,					'scheduled' => __( 'Scheduled' , 'inbound-email'),					'sending' => __( 'Sending' , 'inbound-email')				);								echo '<script type="text/javascript">';				echo 'jQuery(document).ready(function(){';				foreach ( $statuses as $status => $label ) {										$complete = '';					$this_label = '';										if ( $post->post_status == $status ) {												$complete = ' selected=\"selected\"';					}									echo '										jQuery("select#post_status").append("<option value=\"'.$status.'\" '.$complete.'>'.$label.'</option>");					';				}				echo '});';				echo '</script>';			}		}				/**		*	Add admin js that removes menu items		*/		public static function apply_js() {			?>			<script type='text/javascript'>						jQuery( document ).ready( function() {				var i = 0;				jQuery('#menu-posts-inbound-email li').each( function() {					if ( i==3  ) {						jQuery(this).hide();					}					i++;				});					/* hide visibility toggle */				jQuery('.misc-pub-visibility').hide();								/* hide scheduling toggle */								jQuery('.misc-pub-curtime').hide();											});						</script>			<?php		}		/**		*  	Define Row Actions 		*/		public static function filter_row_actions( $actions , $post ) {			if ($post->post_type=='inbound-email') {				unset($actions['inline hide-if-no-js']);				$actions['clear'] = '';			}			return $actions;		}		/**		*  	Adds ability to filter email templates by custom post type 		*/		public static function add_category_taxonomy_filter() {			global $post_type;			if ($post_type === "inbound-email") {			$post_types = get_post_types( array( '_builtin' => false ) );			if ( in_array( $post_type, $post_types ) ) {				$filters = get_object_taxonomies( $post_type );				foreach ( $filters as $tax_slug ) {					$tax_obj = get_taxonomy( $tax_slug );					(isset($_GET[$tax_slug])) ? $current = $_GET[$tax_slug] : $current = 0;					wp_dropdown_categories( array(						'show_option_all' => __('Show All '.$tax_obj->label ),						'taxonomy' 		=> $tax_slug,						'name' 			=> $tax_obj->name,						'orderby' 		=> 'name',						'selected' 		=> $current,						'hierarchical' 		=> $tax_obj->hierarchical,						'show_count' 		=> false,						'hide_empty' 		=> true					) );					}				}			}		}		/**		*  	Clears stats of all CTAs		*/		public static function clear_all_inbound_email_stats() {			$ctas = get_posts( array(				'post_type' => 'inbound-email',				'posts_per_page' => -1			));			foreach ($ctas as $cta) {				Inbound_Mailer_Post_Type::clear_inbound_email_stats( $cta->ID );			}		}				/**		*	Tells the 'email-templates' menu item to sit as a submenu in the 'inbound-email' parent menu		*/		public static function set_email_template_menu_location() {			return 'inbound-email';		}				/**		*	Tells the 'email-templates' label to be 'Templates' instead of 'Email Templates'		*/		public static function set_email_template_labels( $labels ) {			$labels['name'] = __('Templates', 'inbound-emails');			$labels['singular_name'] = __('Templates', 'inbound-emails');						return $labels;		}						/**		*  Get Automation Emails		*  @param STRING $return_type OBEJCT or ARRAY		*/		public static function get_automation_emails_as( $return_type = 'OBJECT' ) {			self::register_post_type();						self::register_post_status();						$emails = get_posts( array(				'numberposts' => -1 ,				'post_status' => 'automated',				'post_type' => 'inbound-email' 			));						//print_r($emails);			if ( $return_type == 'OBJECT' ) {				return $emails;			} 						$array = array();			foreach ( $emails as $email ) {				$array[ $email->ID ] = $email->post_title;			}						return $array;		}	}	/* Load Post Type Pre Init */	$GLOBALS['Inbound_Mailer_Post_Type'] = new Inbound_Mailer_Post_Type();}